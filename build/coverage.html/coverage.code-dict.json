{"/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/test.js":"/* istanbul instrument in package npmtest_ember_data_factory_guy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/lib.npmtest_ember_data_factory_guy.js":"/* istanbul instrument in package npmtest_ember_data_factory_guy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_data_factory_guy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_data_factory_guy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-data-factory-guy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_data_factory_guy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_data_factory_guy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_data_factory_guy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_data_factory_guy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_data_factory_guy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_data_factory_guy.__dirname + '/lib.npmtest_ember_data_factory_guy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/index.js":"/*jshint node: true */\n'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar mergeTrees = require('broccoli-merge-trees');\nvar Funnel = require('broccoli-funnel');\n\nmodule.exports = {\n  name: 'ember-data-factory-guy',\n\n  treeForApp: function(appTree) {\n    var trees = [appTree];\n\n    if (this.includeFactoryGuyFiles) {\n      try {\n        if (fs.statSync('tests/factories').isDirectory()) {\n          var factoriesTree = new Funnel('tests/factories', {\n            destDir: 'tests/factories'\n          });\n          trees.push(factoriesTree);\n        }\n      } catch (err) {\n        // do nothing;\n      }\n    }\n\n    return mergeTrees(trees);\n  },\n\n  treeForVendor: function(tree) {\n    // tree can be undefined.\n    var trees = tree ? [tree] : [];\n\n    if (this.includeFactoryGuyFiles) {\n      var packagePath = path.dirname(require.resolve('jquery-mockjax'));\n      var packageTree = new Funnel(this.treeGenerator(packagePath), {\n        srcDir: '/',\n        destDir: 'jquery-mockjax'\n      });\n      trees.push(packageTree);\n    }\n\n    return mergeTrees(trees);\n  },\n\n  included: function(app) {\n    this._super.included(app);\n    this.app = app;\n\n    this.setupFactoryGuyInclude(app);\n\n    if (this.includeFactoryGuyFiles) {\n      app.import(path.join('vendor', 'jquery-mockjax', 'jquery.mockjax.js'));\n    }\n  },\n\n  setupFactoryGuyInclude: function(app) {\n    let defaultEnabled = /test|development/.test(app.env);\n    let defaultSettings = { enabled: defaultEnabled, useScenarios: false };\n    let userSettings = app.project.config(app.env).factoryGuy || {};\n    let settings = Object.assign(defaultSettings, userSettings);\n    if (settings.useScenarios) { settings.enabled = true; }\n\n    this.includeFactoryGuyFiles = settings.enabled;\n    // Have to be carefull not to exclude factory guy from addon tree\n    // in development or test env\n    let trees = /test|development/.test(app.env) ? 'app' : 'app|addon';\n    this.treeExcludeRegex = new RegExp(trees);\n  },\n\n  treeFor: function(name) {\n    // Not sure why this is necessary, but this stops the factory guy files\n    // from being added to app tree. Would have thought that this would have\n    // happened in treeForApp above, but not the case\n    if (!this.includeFactoryGuyFiles && this.treeExcludeRegex && this.treeExcludeRegex.test(name)) {\n      return;\n    }\n    return this._super.treeFor.apply(this, arguments);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/factory-guy.js":"import Ember from 'ember';\nimport DS from 'ember-data';\nimport ModelDefinition from './model-definition';\nimport FixtureBuilderFactory from './builder/fixture-builder-factory';\n\nconst assign = Ember.assign || Ember.merge;\nlet modelDefinitions = {};\n\n/**\n Given a fixture name like 'person' or 'dude' determine what model this name\n refers to. In this case it's 'person' for each one.\n\n @param {String} name  a fixture name could be model name like 'person'\n or a named person in model definition like 'dude'\n @returns {String} model  name associated with fixture name or undefined if not found\n */\nlet lookupModelForFixtureName = function(name) {\n  let definition = lookupDefinitionForFixtureName(name);\n  if (definition) {\n    return definition.modelName;\n  }\n};\n\n/**\n\n @param {String} name a fixture name could be model name like 'person'\n or a named person in model definition like 'dude'\n @returns {ModelDefinition} ModelDefinition associated with model or undefined if not found\n */\nlet lookupDefinitionForFixtureName = function(name) {\n  for (let model in modelDefinitions) {\n    let definition = modelDefinitions[model];\n    if (definition.matchesName(name)) {\n      return definition;\n    }\n  }\n};\n\nlet extractArgumentsShort = function(...args) {\n  let opts = {};\n  if (Ember.typeOf(args[args.length - 1]) === 'object') {\n    opts = args.pop();\n  }\n  // whatever is left are traits\n  let traits = Ember.A(args).compact();\n  return { opts: opts, traits: traits };\n};\n\n/**\n extract arguments for build and make function\n @param {String} name  fixture name\n @param {String} trait  optional trait names ( one or more )\n @param {Object} opts  optional fixture options that will override default fixture values\n @returns {Object} json fixture\n */\nlet extractArguments = function(...args) {\n  let name = args.shift();\n  if (!name) {\n    throw new Error('Build needs a factory name to build');\n  }\n  return assign({ name: name }, extractArgumentsShort.apply(this, args));\n};\n\nclass FactoryGuy {\n  /**\n   * Setting for FactoryGuy. For now, just logging settings\n   *\n   * logLevel: 0 is off, 1 is on\n   *\n   * @param opts\n   */\n  settings({ logLevel = 0 } = {}) {\n    this.logLevel = logLevel;\n  }\n\n  setStore(aStore) {\n    Ember.assert(\"FactoryGuy#setStore needs a valid store instance.You passed in [\" + aStore + \"]\", aStore instanceof DS.Store);\n    this.store = aStore;\n    this.fixtureBuilderFactory = new FixtureBuilderFactory(this.store);\n  }\n\n  fixtureBuilder(modelName) {\n    return this.fixtureBuilderFactory.fixtureBuilder(modelName);\n  }\n\n  updateHTTPMethod(modelName) {\n    return this.fixtureBuilder(modelName).updateHTTPMethod || 'PUT';\n  }\n\n  /**\n   ```javascript\n\n   Person = DS.Model.extend({\n     type: DS.attr('string'),\n     name: DS.attr('string')\n   })\n\n   FactoryGuy.define('person', {\n     sequences: {\n       personName: function(num) {\n         return 'person #' + num;\n       },\n       personType: function(num) {\n         return 'person type #' + num;\n       }\n     },\n     default: {\n       type: 'normal',\n       name: FactoryGuy.generate('personName')\n     },\n     dude: {\n       type: FactoryGuy.generate('personType')\n     },\n   });\n\n   ```\n\n   For the Person model, you can define named fixtures like 'dude' or\n   just use 'person' and get default values.\n\n   And to get those fixtures you would call them this way:\n\n   FactoryGuy.build('dude') or FactoryGuy.build('person')\n\n   @param {String} model the model to define\n   @param {Object} config your model definition\n   */\n  define(model, config) {\n    modelDefinitions[model] = new ModelDefinition(model, config);\n  }\n\n  /*\n   @param model name of named fixture type like: 'admin' or model name like 'user'\n   @returns {ModelDefinition} if there is one matching that name\n   */\n  findModelDefinition(model) {\n    return modelDefinitions[model];\n  }\n\n  /**\n   Used in model definitions to declare use of a sequence. For example:\n\n   ```\n\n   FactoryGuy.define('person', {\n     sequences: {\n       personName: function(num) {\n         return 'person #' + num;\n       }\n     },\n     default: {\n       name: FactoryGuy.generate('personName')\n     }\n   });\n\n   ```\n\n   @param   {String|Function} value previously declared sequence name or\n   an inline function to use as the sequence\n   @returns {Function} wrapper function that is called by the model\n   definition containing the sequence\n   */\n  generate(nameOrFunction) {\n    let sortaRandomName = Math.floor((1 + Math.random()) * 65536).toString(16) + Date.now();\n    return function() {\n      // this function will be called by ModelDefinition, which has it's own generate method\n      if (Ember.typeOf(nameOrFunction) === 'function') {\n        return this.generate(sortaRandomName, nameOrFunction);\n      } else {\n        return this.generate(nameOrFunction);\n      }\n    };\n  }\n\n  /**\n   Used in model definitions to define a belongsTo association attribute.\n   For example:\n\n   ```\n   FactoryGuy.define('project', {\n       default: {\n         title: 'Project'\n       },\n\n       // setup named project with built in associated user\n       project_with_admin: {\n         user: FactoryGuy.belongsTo('admin')\n       }\n\n       // or use as a trait\n       traits: {\n         with_admin: {\n           user: FactoryGuy.belongsTo('admin')\n         }\n       }\n     })\n   ```\n\n   @param   {String} fixtureName fixture name\n   @param   {Object} opts options\n   @returns {Function} wrapper function that will build the association json\n   */\n  belongsTo(fixtureName, opts) {\n    return ()=> this.buildRaw(fixtureName, opts);\n  }\n\n  /**\n   Used in model definitions to define a hasMany association attribute.\n   For example:\n\n   ```\n   FactoryGuy.define('user', {\n     default: {\n       name: 'Bob'\n     },\n\n     // define the named user type that will have projects\n     user_with_projects: { FactoryGuy.hasMany('project', 2) }\n\n     // or use as a trait\n     traits: {\n       with_projects: {\n         projects: FactoryGuy.hasMany('project', 2)\n       }\n     }\n   })\n\n   ```\n\n   @param   {String} fixtureName fixture name\n   @param   {Number} number of hasMany association items to build\n   @param   {Object} opts options\n   @returns {Function} wrapper function that will build the association json\n   */\n  hasMany(...args) {\n    return ()=> this.buildRawList.apply(this, args);\n  }\n\n  /**\n   Build fixtures for model or specific fixture name.\n\n   For example:\n\n   ```\n\n   FactoryGuy.build('user') for User model\n   FactoryGuy.build('bob') for a 'bob' User\n   FactoryGuy.build('bob', 'dude') for a 'bob' User with dude traits\n   FactoryGuy.build('bob', 'dude', 'funny') for a 'bob' User with dude and funny traits\n   FactoryGuy.build('bob', 'dude', {name: 'wombat'}) for a 'bob' User with dude trait and custom attribute name of 'wombat'\n\n   ```\n\n   @param {String} name  fixture name\n   @param {String} trait  optional trait names ( one or more )\n   @param {Object} opts  optional fixture options that will override default fixture values\n   @returns {Object} json fixture\n   */\n  build() {\n    let args = extractArguments.apply(this, arguments);\n    let fixture = this.buildRaw.apply(this, arguments);\n    let modelName = lookupModelForFixtureName(args.name);\n\n    return this.fixtureBuilder(modelName).convertForBuild(modelName, fixture);\n  }\n\n  buildRaw() {\n    let args = extractArguments.apply(this, arguments);\n\n    let definition = lookupDefinitionForFixtureName(args.name);\n    if (!definition) {\n      throw new Error('Can\\'t find that factory named [' + args.name + ']');\n    }\n\n    return definition.build(args.name, args.opts, args.traits);\n  }\n\n  /**\n   Build list of fixtures for model or specific fixture name. For example:\n\n   ```\n\n   FactoryGuy.buildList('user') // for 0 User models\n   FactoryGuy.buildList('user', 2) // for 2 User models\n   FactoryGuy.build('bob', 2) // for 2 User model with bob attributes\n   FactoryGuy.build('bob', 'with_car', ['with_car',{name: \"Dude\"}])\n   // 2 User model with bob attributes, where the first also has 'with_car' trait\n   // the last has 'with_car' trait and name of \"Dude\"\n\n   ```\n\n   @param {String} name  fixture name\n   @param {Number} number  number of fixtures to create\n   @param {String} trait  optional traits (one or more)\n   @param {Object} opts  optional fixture options that will override default fixture values\n   @returns {Array} list of fixtures\n   */\n  buildList(...args) {\n    Ember.assert(\"buildList needs at least a name ( of model or named factory definition )\", args.length > 0);\n\n    let list = this.buildRawList.apply(this, arguments);\n\n    let name = args.shift();\n    let modelName = lookupModelForFixtureName(name);\n\n    return this.fixtureBuilder(modelName).convertForBuild(modelName, list);\n  }\n\n  buildRawList(...args) {\n    let name = args.shift();\n    let definition = lookupDefinitionForFixtureName(name);\n    if (!definition) {\n      throw new Error(\"Can't find that factory named [\" + name + \"]\");\n    }\n    let number = args[0] || 0;\n    if (typeof number === 'number') {\n      args.shift();\n      let parts = extractArgumentsShort.apply(this, args);\n      return definition.buildList(name, number, parts.traits, parts.opts);\n    }\n    else {\n      return args.map(function(innerArgs) {\n        if (Ember.typeOf(innerArgs) !== 'array') {\n          innerArgs = [innerArgs];\n        }\n        let parts = extractArgumentsShort.apply(this, innerArgs);\n        return definition.build(name, parts.opts, parts.traits);\n      });\n    }\n  }\n\n  /**\n   Make new model and save to store.\n\n   @param {String} name  fixture name\n   @param {String} trait  optional trait names ( one or more )\n   @param {Object} options  optional fixture options that will override default fixture values\n   @returns {DS.Model} record\n   */\n  make() {\n    let args = extractArguments.apply(this, arguments);\n\n    Ember.assert(\n      `FactoryGuy does not have the application's store.\n       Use manualSetup(this.container) in model/component test\n       before using make/makeList`, this.store\n    );\n\n    let modelName = lookupModelForFixtureName(args.name);\n    let fixture = this.buildRaw.apply(this, arguments);\n    let data = this.fixtureBuilder(modelName).convertForMake(modelName, fixture);\n\n    const model = Ember.run(()=> this.store.push(data));\n\n    let definition = lookupDefinitionForFixtureName(args.name);\n    if (definition.hasAfterMake()) {\n      definition.applyAfterMake(model, args.opts);\n    }\n    return model;\n  }\n\n  /**\n   Make new model.\n\n   @param {String} name  fixture name\n   @param {String} trait  optional trait names ( one or more )\n   @param {Object} options  optional fixture options that will override default fixture values\n   @returns {DS.Model} record\n   */\n  makeNew() {\n    let args = extractArguments.apply(this, arguments);\n\n    Ember.assert(\n      `FactoryGuy does not have the application's store.\n       Use manualSetup(this.container) in model/component test\n       before using makeNew`, this.store\n    );\n\n    let modelName = lookupModelForFixtureName(args.name);\n    let fixture = this.buildRaw.apply(this, arguments);\n    delete fixture.id;\n\n    let data = this.fixtureBuilder(modelName).convertForBuild(modelName, fixture, { transformKeys: false });\n\n    const model = Ember.run(()=> this.store.createRecord(modelName, data.get()));\n    return model;\n  }\n\n  /**\n   Make a list of model instances\n\n   ```\n   FactoryGuy.makeList('bob') // makes 0 bob's\n\n   FactoryGuy.makeList('bob', 2) // makes 2 bob's\n\n   FactoryGuy.makeList('bob', 2, 'with_car' , {name: \"Dude\"})\n   // makes 2 bob's that have 'with_car' trait and name of \"Dude\"\n\n   FactoryGuy.makeList('bob', 'with_car', ['with_car',{name: \"Dude\"}])\n   // 2 User model with bob attributes, where the first also has 'with_car' trait\n   // the last has 'with_car' trait and name of \"Dude\"\n   ```\n\n   @param {String} name name of fixture\n   @param {Number} number number to create\n   @param {String} trait  optional trait names ( one or more )\n   @param {Object} options  optional fixture options that will override default fixture values\n   @returns {Array} list of json fixtures or records depending on the adapter type\n   */\n  makeList(...args) {\n    Ember.assert(\n      `FactoryGuy does not have the application's store.\n       Use manualSetup(this.container) in model/component test\n       before using make/makeList`, this.store\n    );\n\n    Ember.assert(\"makeList needs at least a name ( of model or named factory definition )\", args.length >= 1);\n\n    let name = args.shift();\n    let definition = lookupDefinitionForFixtureName(name);\n    Ember.assert(\"Can't find that factory named [\" + name + \"]\", !!definition);\n\n    let number = args[0] || 0;\n    if (typeof number === 'number') {\n      args.shift();\n      let arr = [];\n      for (let i = 0; i < number; i++) {\n        arr.push(this.make.apply(this, [name, ...args]));\n      }\n      return arr;\n    }\n\n    return args.map((innerArgs)=> {\n      if (Ember.typeOf(innerArgs) !== 'array') {\n        innerArgs = [innerArgs];\n      }\n      return this.make(...[name, ...innerArgs]);\n    });\n  }\n\n  /**\n   Clear model instances from store cache.\n   Reset the id sequence for the models back to zero.\n   */\n  clearStore() {\n    this.resetDefinitions();\n    this.clearModels();\n  }\n\n  /**\n   Reset the id sequence for the models back to zero.\n   */\n  resetDefinitions() {\n    for (let model in modelDefinitions) {\n      let definition = modelDefinitions[model];\n      definition.reset();\n    }\n  }\n\n  /**\n   Clear model instances from store cache.\n   */\n  clearModels() {\n    this.store.unloadAll();\n  }\n\n  /**\n   Push fixture to model's FIXTURES array.\n   Used when store's adapter is a DS.FixtureAdapter.\n\n   @param {DS.Model} modelClass\n   @param {Object} fixture the fixture to add\n   @returns {Object} json fixture data\n   */\n  pushFixture(modelClass, fixture) {\n    let index;\n    if (!modelClass.FIXTURES) {\n      modelClass.FIXTURES = [];\n    }\n\n    index = this.indexOfFixture(modelClass.FIXTURES, fixture);\n\n    if (index > -1) {\n      modelClass.FIXTURES.splice(index, 1);\n    }\n\n    modelClass.FIXTURES.push(fixture);\n\n    return fixture;\n  }\n\n  /**\n   Used in compliment with pushFixture in order to\n   ensure we don't push duplicate fixtures\n\n   @private\n   @param {Array} fixtures\n   @param {String|Integer} id of fixture to find\n   @returns {Object} fixture\n   */\n  indexOfFixture(fixtures, fixture) {\n    let index = -1,\n        id    = fixture.id + '';\n    Ember.A(fixtures).find(function(r, i) {\n      if ('' + Ember.get(r, 'id') === id) {\n        index = i;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return index;\n  }\n\n  /**\n   Clears all model definitions\n   */\n  clearDefinitions(opts) {\n    if (!opts) {\n      this.modelDefinitions = {};\n    }\n  }\n\n  /**\n   Build url's for the mockjax calls. Proxy to the adapters buildURL method.\n\n   @param {String} typeName model type name like 'user' for User model\n   @param {String} id\n   @return {String} url\n   */\n  buildURL(modelName, id = null, requestType, queryParams) {\n    const adapter = this.store.adapterFor(modelName);\n    return adapter.buildURL(modelName, id, null, requestType, queryParams);\n  }\n\n  /**\n   Change reload behavior to only used cached models for find/findAll.\n   You still have to handle query calls, since they always ajax for data.\n\n   @params {Array} except list of models you don't want to mark as cached\n   */\n  cacheOnlyMode({ except=[] }={}) {\n    let store = this.store;\n    let findAdapter = store.adapterFor.bind(store);\n\n    store.adapterFor = function(name) {\n      let adapter = findAdapter(name);\n      let shouldCache = ()=> {\n        if (Ember.isPresent(except)) {\n          return (Ember.A(except).includes(name));\n        }\n        return false;\n      };\n      adapter.shouldBackgroundReloadAll = shouldCache;\n      adapter.shouldBackgroundReloadRecord = shouldCache;\n      adapter.shouldReloadRecord = shouldCache;\n      adapter.shouldReloadAll = shouldCache;\n      return adapter;\n    };\n  }\n}\n\nlet factoryGuy = new FactoryGuy();\n\nlet make = factoryGuy.make.bind(factoryGuy);\nlet makeNew = factoryGuy.makeNew.bind(factoryGuy);\nlet makeList = factoryGuy.makeList.bind(factoryGuy);\nlet build = factoryGuy.build.bind(factoryGuy);\nlet buildList = factoryGuy.buildList.bind(factoryGuy);\nlet clearStore = factoryGuy.clearStore.bind(factoryGuy);\n\nexport {make, makeNew, makeList, build, buildList, clearStore};\nexport default factoryGuy;\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/missing-sequence-error.js":"export default function(message) {\n  this.toString = function () {\n    return message;\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/model-definition.js":"/* global require */\nimport Ember from 'ember';\nimport FactoryGuy from './factory-guy';\nimport Sequence from './sequence';\nimport MissingSequenceError from './missing-sequence-error';\nimport $ from 'jquery';\n\nlet Fragment;\ntry {\n  let MF = require('ember-data-model-fragments');\n  Fragment = MF.default.Fragment;\n} catch (e) {\n}\n\n/**\n A ModelDefinition encapsulates a model's definition\n\n @param model\n @param config\n @constructor\n */\nclass ModelDefinition {\n\n  constructor(model, config) {\n    this.modelName = model;\n    this.modelId = 1;\n    this.originalConfig = $.extend(true, {}, config);\n    this.parseConfig(Ember.copy(config));\n  }\n\n  /**\n   Returns a model's full relationship if the field is a relationship.\n\n   @param {String} field  field you want to relationship info for\n   @returns {DS.Relationship} relationship object if the field is a relationship, null if not\n   */\n  getRelationship(field) {\n    let modelClass = FactoryGuy.store.modelFor(this.modelName);\n    let relationship = Ember.get(modelClass, 'relationshipsByName').get(field);\n    return relationship || null;\n  }\n\n  /**\n   Is this model a fragment type\n\n   @returns {Boolean} true if it's a model fragment\n   */\n  isModelAFragment() {\n    if (Fragment) {\n      let type = FactoryGuy.store.modelFor(this.modelName);\n      return Fragment.detect(type);\n    }\n    return false;\n  }\n\n  /**\n   Get model fragment info ( if it exists )\n\n   @param attribute\n   @returns {Object} or null if no fragment info\n   */\n  modelFragmentInfo(attribute) {\n    let modelClass = FactoryGuy.store.modelFor(this.modelName);\n    return Ember.get(modelClass, 'attributes').get(attribute);\n  }\n\n  /**\n   Is this attribute a model fragment type\n\n   @param {String} attribute  attribute you want to check\n   @returns {Boolean} true if it's a model fragment\n   */\n  isModelFragmentAttribute(attribute) {\n    let info = this.modelFragmentInfo(attribute);\n    return !!(info && info.type && info.type.match('mf-fragment'));\n  }\n\n  /**\n   Get actual model fragment type, in case the attribute name is different\n   than the fragment type\n\n   @param {String} attribute attribute name for which you want fragment type\n   @returns {String} fragment type\n   */\n  fragmentType(attribute) {\n    let info = this.modelFragmentInfo(attribute);\n    let match = info.type.match('mf-fragment\\\\$(.*)');\n    return match[1];\n  }\n\n  /**\n   @param {String} name model name like 'user' or named type like 'admin'\n   @returns {Boolean} true if name is this definitions model or this definition\n   contains a named model with that name\n   */\n  matchesName(name) {\n    return this.modelName === name || this.namedModels[name];\n  }\n\n  // Increment id\n  nextId() {\n    return this.modelId++;\n  }\n\n  // Decrement id\n  backId() {\n    return this.modelId--;\n  }\n\n  /**\n   Call the next method on the named sequence function. If the name\n   is a function, create the sequence with that function\n\n   @param   {String} name previously declared sequence name or\n   an the random name generate for inline functions\n   @param   {Function} sequenceFn optional function to use as sequence\n   @returns {String} output of sequence function\n   */\n  generate(name, sequenceFn) {\n    if (sequenceFn) {\n      if (!this.sequences[name]) {\n        // create and add that sequence function on the fly\n        this.sequences[name] = new Sequence(sequenceFn);\n      }\n    }\n    let sequence = this.sequences[name];\n    if (!sequence) {\n      throw new MissingSequenceError(\n        `Can not find that sequence named [${name}] in '${this.modelName}' definition`\n      );\n    }\n    return sequence.next();\n  }\n\n  /**\n   Build a fixture by name\n\n   @param {String} name fixture name\n   @param {Object} opts attributes to override\n   @param {String} traitArgs array of traits\n   @returns {Object} json\n   */\n  build(name, opts, traitArgs) {\n    let traitsObj = {};\n    traitArgs.forEach((trait)=> {\n      Ember.assert(`You're trying to use a trait [${trait}] for model ${this.modelName} but that trait can't be found.`, this.traits[trait]);\n      $.extend(traitsObj, this.traits[trait]);\n    });\n    let modelAttributes = this.namedModels[name] || {};\n    // merge default, modelAttributes, traits and opts to get the rough fixture\n    let fixture = $.extend({}, this.defaultAttributes, modelAttributes, traitsObj, opts);\n\n    if (this.notPolymorphic !== undefined) {\n      fixture._notPolymorphic = true;\n    }\n\n    // set the id, unless it was already set in opts\n    if (!fixture.id) {\n      // Setting a flag to indicate that this is a generated an id,\n      // so it can be rolled back if the fixture throws an error.\n      fixture._generatedId = true;\n      fixture.id = this.nextId();\n    }\n\n    try {\n      // deal with attributes that are functions or objects\n      for (let attribute in fixture) {\n        let attributeType = Ember.typeOf(fixture[attribute]);\n        if (attributeType === 'function') {\n          this.addFunctionAttribute(fixture, attribute);\n        } else if (attributeType === 'object') {\n          this.addObjectAttribute(fixture, attribute);\n        }\n      }\n    } catch (e) {\n      if (fixture._generatedId) {\n        this.backId();\n      }\n      throw e;\n    }\n\n    if (this.isModelAFragment()) {\n      delete fixture.id;\n    }\n    delete fixture._generatedId;\n    return fixture;\n  }\n\n  // function might be a sequence, an inline attribute function or an association\n  addFunctionAttribute(fixture, attribute) {\n    fixture[attribute] = fixture[attribute].call(this, fixture);\n  }\n\n  addObjectAttribute(fixture, attribute) {\n    // If it's an object and it's a model association attribute, build the json\n    // for the association and replace the attribute with that json\n    let relationship = this.getRelationship(attribute);\n\n    if (this.isModelFragmentAttribute(attribute)) {\n      let payload = fixture[attribute];\n      if ($.isEmptyObject(payload)) {\n        // make a payload, but make sure it's the correct fragment type\n        let actualType = this.fragmentType(attribute);\n        payload = FactoryGuy.buildRaw(actualType, {});\n      }\n      // use the payload you have been given\n      fixture[attribute] = payload;\n    }\n    if (relationship) {\n      let payload = fixture[attribute];\n      if (!payload.isProxy) {\n        fixture[attribute] = FactoryGuy.buildRaw(relationship.type, payload);\n      }\n    }\n  }\n\n  /**\n   Build a list of fixtures\n\n   @param {String} name model name or named model type\n   @param {Integer} number of fixtures to build\n   @param {Array} array of traits to build with\n   @param {Object} opts attribute options\n   @returns array of fixtures\n   */\n  buildList(name, number, traits, opts) {\n    let arr = [];\n    for (let i = 0; i < number; i++) {\n      arr.push(this.build(name, opts, traits));\n    }\n    return arr;\n  }\n\n  // Set the modelId back to 1, and reset the sequences\n  reset() {\n    this.modelId = 1;\n    for (let name in this.sequences) {\n      this.sequences[name].reset();\n    }\n  }\n\n  hasAfterMake() {\n    return !!this.afterMake;\n  }\n\n  applyAfterMake(model, opts) {\n    if (this.afterMake) {\n      // passed in options override transient setting\n      let options = $.extend({}, this.transient, opts);\n      this.afterMake(model, options);\n    }\n  }\n\n  /*\n   Need special 'merge' function to be able to merge objects with functions\n\n   @param newConfig\n   @param config\n   @param otherConfig\n   @param section\n   */\n  mergeSection(config, otherConfig, section) {\n    let attr;\n    if (otherConfig[section]) {\n      if (!config[section]) {\n        config[section] = {};\n      }\n      for (attr in otherConfig[section]) {\n        if (!config[section][attr]) {\n          config[section][attr] = otherConfig[section][attr];\n        }\n      }\n    }\n  }\n\n  /**\n   When extending another definition, merge it with this one by:\n   merging only sequences, default section and traits\n\n   @param {Object} config\n   @param {ModelDefinition} otherDefinition\n   */\n  merge(config, otherDefinition) {\n    let otherConfig = $.extend(true, {}, otherDefinition.originalConfig);\n    delete otherConfig.extends;\n    this.mergeSection(config, otherConfig, 'sequences');\n    this.mergeSection(config, otherConfig, 'default');\n    this.mergeSection(config, otherConfig, 'traits');\n  }\n\n  mergeConfig(config) {\n    let extending = config.extends;\n    let definition = FactoryGuy.findModelDefinition(extending);\n    Ember.assert(\n      `You are trying to extend [${this.modelName}] with [ ${extending} ].\n      But FactoryGuy can't find that definition [ ${extending} ]\n      you are trying to extend. Make sure it was created/imported before\n      you define [ ${this.modelName} ]`, definition);\n    this.merge(config, definition);\n  }\n\n  parseDefault(config) {\n    this.defaultAttributes = config.default || {};\n    delete config.default;\n  }\n\n  parseTraits(config) {\n    this.traits = config.traits || {};\n    delete config.traits;\n  }\n\n  parseTransient(config) {\n    this.transient = config.transient || {};\n    delete config.transient;\n  }\n\n  parseCallBacks(config) {\n    this.afterMake = config.afterMake;\n    delete config.afterMake;\n  }\n\n  parsePolymorphicSetting(config) {\n    if (config.polymorphic !== undefined && config.polymorphic === false) {\n      this.notPolymorphic = true;\n      delete config.polymorphic;\n    }\n  }\n\n  parseSequences(config) {\n    this.sequences = config.sequences || {};\n    delete config.sequences;\n    for (let sequenceName in this.sequences) {\n      let sequenceFn = this.sequences[sequenceName];\n      if (Ember.typeOf(sequenceFn) !== 'function') {\n        throw new Error(\n          `Problem with [${sequenceName}] sequence definition.\n          Sequences must be functions`);\n      }\n      this.sequences[sequenceName] = new Sequence(sequenceFn);\n    }\n  }\n\n  parseConfig(config) {\n    if (config.extends) {\n      this.mergeConfig(config);\n    }\n    this.parsePolymorphicSetting(config);\n    this.parseSequences(config);\n    this.parseTraits(config);\n    this.parseDefault(config);\n    this.parseTransient(config);\n    this.parseCallBacks(config);\n    this.namedModels = config;\n  }\n}\n\nexport default ModelDefinition;","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/scenario.js":"import Ember from 'ember';\nimport FactoryGuy from 'ember-data-factory-guy';\nimport * as fgMethods from 'ember-data-factory-guy';\n\nlet proxyFx = [\n  'make', 'makeNew', 'makeList', 'build', 'buildList',\n  'mockFind', 'mockFindRecord', 'mockFindAll',\n  'mockReload', 'mockQuery', 'mockQueryRecord',\n  'mockUpdate', 'mockCreate', 'mockDelete'\n];\n\nexport default class {\n\n  constructor() {\n    proxyFx.forEach(fx => this[fx] = fgMethods[fx]);\n    this.store = FactoryGuy.store;\n  }\n\n  static settings(opts = {}) {\n    Ember.$.mockjaxSettings.logging = opts.mockjaxLogLevel || 1;\n    Ember.$.mockjaxSettings.responseTime = opts.responseTime || 0;\n    FactoryGuy.settings(opts);\n  }\n\n  run() {\n  }\n\n  include(scenarios) {\n    (scenarios || []).forEach(Scenario => (new Scenario()).run());\n  }\n}","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/sequence.js":"export default function (fn) {\n  let index = 1;\n  this.next = function () {\n    return fn.call(this, index++);\n  };\n  this.reset = function () {\n    index = 1;\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/config/ember-try.js":"/*jshint node:true*/\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      bower: {\n        devDependencies: {}\n      }\n    },\n    {\n      name: 'ember-ember-data-2.11',\n      npm: {\n        devDependencies: {\n          'ember-source': '2.11',\n          'ember-data': '2.11',\n          'ember-data-model-fragments': '2.11'\n        }\n      }\n    },\n    {\n      name: 'ember-ember-data-release',\n      bower: {\n        devDependencies: {\n          'ember': 'components/ember#release'\n        },\n        resolutions: {\n          'ember': 'release'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-data': 'release'\n        }\n      }\n    },\n    {\n      name: 'ember-ember-data-beta',\n      bower: {\n        devDependencies: {\n          'ember': 'components/ember#beta'\n        },\n        resolutions: {\n          'ember': 'beta'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-data': 'beta'\n        }\n      }\n    },\n    {\n      name: 'ember-ember-data-canary',\n      bower: {\n        devDependencies: {\n          'ember': 'components/ember#canary'\n        },\n        resolutions: {\n          'ember': 'canary'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-data': 'canary'\n        }\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  //return { };\n  var ENV = {};\n\n  ENV.contentSecurityPolicy = {\n    'style-src': \"'self' 'unsafe-inline' 'unsave-eval'\"\n  };\n  return ENV;\n\n};\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/payload/base-payload.js":"import Ember from 'ember';\nconst { w } = Ember.String;\n\nexport default class {\n\n  /**\n   Proxy class for getting access to a json payload.\n   Allows you to: \n     - inspect a payload with friendly .get(attr)  syntax \n     - add to json payload with more json built from build and buildList methods.\n\n   @param {String} modelName name of model for payload\n   @param {Object} json json payload being proxied\n   @param {Boolean} converter the converter that built this json\n   */\n  constructor(modelName, json, converter) {\n    this.modelName = modelName;\n    this.json = json;\n    this.converter = converter;\n    this.listType = converter.listType || false;\n    this.proxyMethods = w(\"getModelPayload isProxy get add unwrap\");\n    this.wrap(this.proxyMethods);\n  }\n\n  /**\n   Add another json payload or meta data to this payload\n\n   Typically you would build a payload and add that to another one\n\n   Usage:\n   ```\n   let batMen = buildList('bat_man', 2);\n   let user = build('user').add({json: batMen});\n   ```\n\n   but you can also add meta data:\n   ```\n   let user = buildList('user', 2).add({meta: { next: '/url?page=3', previous: '/url?page=1'}});\n   ```\n\n   @param {Object} optional json built from FactoryGuy build or buildList or\n   meta data to add to payload\n   @returns {Object} the current json payload\n   */\n  add(more) {\n    this.converter.included = this.json;\n    Ember.A(Object.getOwnPropertyNames(more))\n      .reject(key=> Ember.A(this.proxyMethods).includes(key))\n      .forEach(key=> {\n        if (Ember.typeOf(more[key]) === \"array\") {\n          more[key].forEach(data=> this.converter.addToIncluded(data, key));\n        } else {\n          if (key === \"meta\") {\n            this.addMeta(more[key]);\n          } else {\n            this.converter.addToIncluded(more[key], key);\n          }\n        }\n      });\n    return this.json;\n  }\n\n  /**\n    Add new meta data to the json payload, which will\n    overwrite any existing meta data with same keys\n   \n    @param {Object} data meta data to add\n   */\n  addMeta(data) {\n    this.json.meta = this.json.meta || {};\n    Object.assign(this.json.meta, data);\n  }\n\n  // marker function for saying \"I am a proxy\"\n  isProxy() {\n  }\n\n  // get the top level model's payload ( without the includes or meta data ) \n  getModelPayload() {\n    return this.get();\n  }\n\n  // each subclass has unique proxy methods to add to the basic\n  addProxyMethods(methods) {\n    this.proxyMethods = this.proxyMethods.concat(methods);\n    this.wrap(methods);\n  }\n\n  // add proxy methods to json object\n  wrap(methods) {\n    methods.forEach(method => this.json[method] = this[method].bind(this));\n  }\n\n  // remove proxy methods from json object\n  unwrap() {\n    this.proxyMethods.forEach(method => delete this.json[method]);\n  }\n\n  /**\n   Main access point for most users to get data from the\n   json payload\n\n   Could be asking for attribute like 'id' or 'name',\n   or index into list for list type like 0 or 1\n\n   @param key\n   @returns {*}\n   */\n  get(key) {\n    if (this.listType) {\n      return this.getListKeys(key);\n    }\n    return this.getObjectKeys(key);\n  }\n\n\n}","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/payload/drf-payload.js":"import Ember from 'ember';\nimport JSONPayload from './json-payload';\n\nexport default class extends JSONPayload {\n\n  // only add the meta data if there is query ( results key is present )\n  addMeta(data) {\n    if (this.json.results) {\n      Object.assign(this.json, data);\n    }\n  }\n\n  getListKeys(key) {\n    let attrs = this.json.results;\n    if (Ember.isEmpty(key)) {\n      return JSON.parse(JSON.stringify(attrs));\n    }\n    if (typeof key === 'number') {\n      return attrs[key];\n    }\n    if (key === 'firstObject') {\n      return attrs[0];\n    }\n    if (key === 'lastObject') {\n      return attrs[attrs.length - 1];\n    }\n  }\n\n}","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/payload/json-api-payload.js":"import Ember from 'ember';\nimport BasePayload from './base-payload';\n\nexport default class extends BasePayload {\n\n  constructor(modelName, json, converter) {\n    super(modelName, json, converter);\n    this.data = json.data;\n    this.addProxyMethods([\"includes\"]);\n  }\n\n  getModelPayload() {\n    return this.data;\n  }\n\n  add(more) {\n    if (more.meta) {\n      this.addMeta(more.meta);\n    } else {\n      if (!this.json.included) {\n        this.json.included = [];\n      }\n      this.converter.included = this.json.included;\n      // add the main moreJson model payload\n      let data = more.getModelPayload();\n      if (Ember.typeOf(data) === \"array\") {\n        data.forEach(dati=> this.converter.addToIncluded(dati));\n      } else {\n        this.converter.addToIncluded(data);\n      }\n      // add all of the moreJson's includes\n      this.converter.addToIncludedFromProxy(more);\n    }\n    return this.json;\n  }\n\n  createAttrs(data) {\n    let relationships = {};\n    Object.keys(data.relationships||[]).forEach((key)=> {\n      relationships[key] = data.relationships[key].data;\n    });\n    let attrs = Ember.$.extend({}, data.attributes, relationships);\n    attrs.id = data.id;\n    return attrs;\n  }\n\n  includes() {\n    return this.json.included || [];\n  }\n\n  getObjectKeys(key) {\n    let attrs = this.createAttrs(this.data);\n    if (!key) {\n      return attrs;\n    }\n    if (attrs[key]) {\n      return attrs[key];\n    }\n  }\n\n  getListKeys(key) {\n    let attrs = this.data.map((data)=> this.createAttrs(data));\n    if (Ember.isEmpty(key)) {\n      return attrs;\n    }\n    if (typeof key === 'number') {\n      return attrs[key];\n    }\n    if (key === 'firstObject') {\n      return attrs[0];\n    }\n    if (key === 'lastObject') {\n      return attrs[attrs.length - 1];\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/payload/json-payload.js":"import Ember from 'ember';\nimport BasePayload from './base-payload';\n\nexport default class extends BasePayload {\n\n  /** \n   Can't add to included array for JSON payloads since they have\n   no includes or sideloaded relationships\n\n   Meta not working at the moment for this serializer even though\n   it is being included here in the payload\n   */\n  add(more) {\n    if (more.meta) {\n      this.addMeta(more.meta);\n    }\n    return this.json;\n  }\n\n  getObjectKeys(key) {\n    let attrs = this.json;\n    if (Ember.isEmpty(key)) {\n      return JSON.parse(JSON.stringify(attrs));\n    }\n    return attrs[key];\n  }\n\n  getListKeys(key) {\n    let attrs = this.json;\n    if (Ember.isEmpty(key)) {\n      return JSON.parse(JSON.stringify(attrs));\n    }\n    if (typeof key === 'number') {\n      return attrs[key];\n    }\n    if (key === 'firstObject') {\n      return attrs[0];\n    }\n    if (key === 'lastObject') {\n      return attrs[attrs.length - 1];\n    }\n  }\n\n}","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/payload/rest-payload.js":"import Ember from 'ember';\nimport BasePayload from './base-payload';\n\nexport default class extends BasePayload {\n\n  constructor(modelName, json, converter) {\n    super(modelName, json, converter);\n    this.payloadKey = converter.getPayloadKey(modelName);\n    this.addProxyMethods(['includeKeys','getInclude']);\n  }\n\n  includeKeys() {\n    let keys = Ember.A(Object.keys(this.json)).reject(key => this.payloadKey === key);\n    return Ember.A(keys).reject(key=> Ember.A(this.proxyMethods).includes(key)) || [];\n  }\n\n  getInclude(modelType) {\n    return this.json[modelType];\n  }\n\n  getObjectKeys(key) {\n    let attrs = this.json[this.payloadKey];\n    if (Ember.isEmpty(key)) {\n      return attrs;\n    }\n    return attrs[key];\n  }\n\n  getListKeys(key) {\n    let attrs = this.json[this.payloadKey];\n    if (Ember.isEmpty(key)) {\n      return attrs;\n    }\n    if (typeof key === 'number') {\n      return attrs[key];\n    }\n    if (key === 'firstObject') {\n      return attrs[0];\n    }\n    if (key === 'lastObject') {\n      return attrs[attrs.length - 1];\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/utils/helper-functions.js":"/* global requirejs, require */\n/*jslint node: true */\n\nimport Ember from 'ember';\n\nexport function isEquivalent(a, b) {\n  var type = Ember.typeOf(a);\n  if (type !== Ember.typeOf(b)) {\n    return false;\n  }\n  switch (type) {\n    case 'object':\n      return objectIsEquivalent(a, b);\n    case 'array':\n      return arrayIsEquivalent(a, b);\n    default:\n      return a === b;\n  }\n}\n\nexport function isPartOf(object, part) {\n  return Object.keys(part).every(function(key) {\n    return isEquivalent(object[key], part[key]);\n  });\n}\n\nfunction arrayIsEquivalent(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n  return arrayA.every(function(item, index) {\n    return isEquivalent(item, arrayB[index]);\n  });\n}\n\nfunction objectIsEquivalent(objectA, objectB) {\n  var aProps = Object.keys(objectA);\n  var bProps = Object.keys(objectB);\n  if (aProps.length !== bProps.length) {\n    return false;\n  }\n  for (let i = 0; i < aProps.length; i++) {\n    let propName = aProps[i];\n    let aEntry = objectA[propName];\n    let bEntry = objectB[propName];\n    if (!isEquivalent(aEntry, bEntry)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// always exclude jshint or jscs files\nexport const excludeRegex = new RegExp('[^\\s]+(\\\\.(jscs|jshint))$', 'i');\n\n/**\n * Find files that have been seen by some tree in the application\n * and require them. Always exclude jshint and jscs files\n *\n * @param filePattern\n * @returns {Array}\n */\nexport function requireFiles(filePattern) {\n  let filesSeen = Object.keys(requirejs._eak_seen);\n\n  return filesSeen.filter((moduleName)=> {\n    return !excludeRegex.test(moduleName) && filePattern.test(moduleName);\n  }).map((moduleName)=> require(moduleName, null, null, true));\n}\n\nexport function escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nexport function stripQueryParams(uri) {\n  return uri.split('?')[0];\n}","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/utils/load-factories.js":"import {requireFiles} from './helper-functions';\n\nconst factoryFileRegExp = new RegExp('/tests/factories');\n\nexport default function() {\n  requireFiles(factoryFileRegExp);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/utils/load-scenarios.js":"import Ember from 'ember';\nimport {requireFiles} from './helper-functions';\n\nconst scenarioFileRegExp = new RegExp('/scenarios/main$');\n/**\n * There is only one scenario file that is important here.\n * And that is: scenarios/main.js file.\n *\n * This file dictates what the scenario will be, since from\n * there you can include other scenarios, and compose whatever\n * grand scheme you have in mind\n *\n * @param container\n */\nexport default function (container) {\n  let config = container.owner.resolveRegistration('config:environment') || {};\n  let { factoryGuy } = config;\n  if (factoryGuy && factoryGuy.useScenarios) {\n    let [Scenario] = requireFiles(scenarioFileRegExp);\n    Ember.assert(`[ember-data-factory-guy] No app/scenarios/main.js file was found.\n      If you have factoryGuy set to true in config/environment.js file,\n      then you should setup a file app/scenarios/main.js to control what data will\n      be like in the application.`, Scenario);\n    (new Scenario['default']()).run();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/addon/utils/manual-setup.js":"// For manually setting up FactoryGuy in unit/integration tests where the application is not started\nimport FactoryGuy from '../factory-guy';\nimport loadFactories from './load-factories';\nimport loadScenarios from './load-scenarios';\n\nexport default function(container) {\n  FactoryGuy.setStore(container.lookup('service:store'));\n  FactoryGuy.resetDefinitions();\n  loadFactories();\n  loadScenarios(container);\n}\n\n","/home/travis/build/npmtest/node-npmtest-ember-data-factory-guy/node_modules/ember-data-factory-guy/app/initializers/ember-data-factory-guy.js":"import manualSetup from 'ember-data-factory-guy/utils/manual-setup';\n\nexport default {\n  name: 'ember-data-factory-guy',\n  after: 'ember-data',\n\n  initialize: function (application) {\n    if (arguments.length > 1) {\n      application = arguments[1];\n    }\n    let container =  application.__container__;\n    manualSetup(container);\n  }\n};\n"}